import dayjs from "dayjs";

const formaterKeyValueToMap = objArray => {
  let map = {};
  if (objArray && Array.isArray(objArray)) {
    for (let i = 0, leng = objArray.length; i < leng; i += 1) {
      const obj = objArray[i];
      map[obj.key] = obj.value;
    }
  }
  return map;
};

const formaterXvueConfigParams = config => {
  const parameters = config.properties;
  if (!parameters || parameters.length == 0) {
    return null;
  }
  return formaterKeyValueToMap(parameters);
};

/**
 * 对象数组arr按属性prop[属性值为number]升序排序
 * @param { Array } arr
 * @param { String } prop
 */
const objArrSort = (arr, prop) => {
  if (!arr || !Array.isArray(arr)) {
    return [];
  }
  if (arr.length <= 1) {
    return arr;
  }
  function compare(obj1, obj2) {
    var value1 = obj1[prop];
    var value2 = obj2[prop];
    return value1 - value2;
  }
  return arr.sort(compare);
};

export function getQueryString(param) {
  const reg = new RegExp("(^|&)" + param + "=([^&]*)(&|$)");
  const r =
    window.location.search.substr(1).match(reg) ||
    window.location.hash
      .substring(window.location.hash.search(/\?/) + 1)
      .match(reg);
  if (r != null) {
    return decodeURIComponent(r[2]);
  }
}

// 支持多参数传递
export function progressCurrying(fn) {
  let _this = this;
  let len = fn.length;
  let args = arguments || [];

  return function() {
    let _args = Array.prototype.slice.call(arguments);
    Array.prototype.push.apply(args, _args);

    // 如果参数个数小于最初的fn.length，则递归调用，继续收集参数
    if (_args.length < len) {
      return progressCurrying.call(_this, fn, _args);
    }

    // 参数收集完毕，则执行fn
    return fn.apply(this, _args);
  };
}

export function utcToCurrentTime(time, format) {
  if (!time) return time;
  let type = typeof time;
  if (type === "undefined") return "";
  if (type === "object") {
    let curTime = new Date();
    return format ? dayjs().format(format) : curTime;
  }
  let utcTime = 0;
  if (type === "number") {
    utcTime = time;
  } else {
    utcTime = dayjs(time).valueOf();
  }
  let localOffset = new Date().getTimezoneOffset() * 60000; //getTimezoneOffset()返回是以分钟为单位，需要转化成ms
  let localTime = utcTime - localOffset;
  let resTime = new Date(localTime);
  return format ? dayjs(localTime).format(format) : resTime;
}

export function currentTimeToUtc(time, format) {
  if (!time) return time;
  let localTime = dayjs(time).valueOf();
  let localOffset = new Date().getTimezoneOffset() * 60000; //getTimezoneOffset()返回是以分钟为单位，需要转化成ms
  let utc = localTime + localOffset;
  let resTime = new Date(utc);
  return format ? dayjs(utc).format(format) : new Date(localTime);
}

export { formaterKeyValueToMap, formaterXvueConfigParams, objArrSort };
