<template>
  <div class="chart-wrapper-box">
    <canvas
      ref="painterRef"
      id="tridentChartId"
      class="chart-box"
      @click.stop
      @toustart.prevent.stop
      @dragstart.prevent.stop></canvas>
    <div class="y-unit-box unit1">{{ valueUnit }}</div>
    <!--<div
      v-if="isExistChainRatio"
      class="y-unit-box unit2">{{ chainRatioName }}</div>-->
    <div
			ref="toolTipRef"
			v-show="isVisibleTooltip"
			class="f2-tooltip-container"
			:style="{
				left: tooltipLeft,
				top: tooltipTop
			}"
      @click="!isToolipLocked && (isVisibleTooltip = false)">
      <h4 class="date">{{ tooltipData[0] && tooltipData[0].title }}</h4>
      <div
        v-if="tooltipData && tooltipData.filter(({ name }) => name !== 'chainRatio').length > 1"
        class="summary-title-box">
        {{ summaryTitle }}
        <span
          v-if="totalIndexItem"
          class="total">
          <em style="margin-top: -2px;">{{ totalIndexItem.indexValue | filterNumber(totalIndexItem.indexUnit) }}</em>{{ totalIndexItem.indexUnit }}
        </span>
      </div>
      <ul class="income-detail-list-box">
        <li
          v-for="(item, index) in tooltipData.filter(({ name }) => (name !== 'chainRatio') && (name !== '网格收入'))"
          :key="index"
          class="income-detail-item-box">
          <span class="left">
            <span
              class="circle"
              :style="{
                backgroundColor: item.color
              }"></span>{{ item.name }}
          </span>
          <span class="right">
            <em>{{ item.value | filterNumber(item.origin.indexUnit) }}</em>{{ item.origin.indexUnit }}
          </span>
        </li>
      </ul>
      <!--<div
        v-if="tooltipData.findIndex(({ name }) => name === 'chainRatio') !== -1"
        class="chain-ratio-box">
        <span
          class="circle"
          :style="{
            backgroundColor: (tooltipData.find(({ name }) => name === 'chainRatio') || {}).color
          }"></span>{{ chainRatioName }}
        <em class="percentage">
          {{ (tooltipData.find(({ name }) => name === 'chainRatio') || {}).value !== '' ? formatChainRatio((tooltipData.find(({ name }) => name === 'chainRatio') || {}).value) + '%' : '--' }}
          <span
            v-if="(tooltipData.find(({ name }) => name === 'chainRatio') || {}).value != 0"
            :class="['arrow', {
              up: (tooltipData.find(({ name }) => name === 'chainRatio') || {}).value > 0,
              down: (tooltipData.find(({ name }) => name === 'chainRatio') || {}).value < 0
            }]">→</span>
        </em>
      </div>-->
    </div>
  </div>
</template>

<script>
import F2 from "@antv/f2/lib/index-all";
import { sepNumber, isAndroidOrIOS } from '@/util/common';

export default {
  name: 'DevelopTridentChart',
  props: {
    data: {
      required: true,
      type: Array,
      default: []
    },
    summaryTitle: {
      type: String,
      default: ''
    }
  },
  data() {
    return {
      isVisibleTooltip: false,
			tooltipLeft: '',
			tooltipTop: '',
      tooltipData: []
    }
  },
  computed: {
    valueUnit() {
      if(!this.data || this.data.length === 0) return ''
      return this.data[0].indexUnit
    },
    isExistChainRatio() {
      if(!this.data || this.data.length === 0) return false
      return !!this.data[0].chainRatioName
    },
    chainRatioName() {
      if(!this.data || this.data.length === 0) return ''
      return this.data[0].chainRatioName
    },
    totalIndexItem() {
      const tooltipData = this.tooltipData
      if(!tooltipData || tooltipData.length === 0) return
      
      const date = tooltipData[0].title
      const totalItem = this.data.find(({ date: _date, indexCode }) => (_date === date) && (indexCode === 'M10104100018'))
      return totalItem
    }
  },
  watch: {
    data: {
      deep: true,
      handler() {
        this.renderChart()
      }
    }
  },
  mounted() {
    this.renderChart()
  },
  methods: {
    setTooltip(currentDatas) {
			if(!currentDatas) {
				return this.isVisibleTooltip = false
			}

      if(!currentDatas[0]) return
      
      const left = currentDatas[0].x
      const barWidth = currentDatas[0].width
      const right = left + barWidth / 2
      const painterWidth = this.$refs.painterRef.getBoundingClientRect().width
      const { width: tooltipWidth, height: tooltipHeight } = this.$refs.toolTipRef.getBoundingClientRect()

			const toolTipleft = Number((((painterWidth - right) <= (tooltipWidth || 155)) ? (right - barWidth - (tooltipWidth || 155) - 10) : right + 10)).toFixed(2)
			this.isVisibleTooltip = true
      this.tooltipData = currentDatas
		},
    renderChart() {
      const self = this
      const chart = new F2.Chart({
        id: 'tridentChartId',
        autoFit: true,
        pixelRatio: window.devicePixelRatio,
        appendPadding: [13, 0, 12, 0]
      })

      chart.legend(false)

      // 去掉网格总收入
      const processedData = this.data.filter(({ indexCode }) => indexCode !== 'M10104100018')

      chart.source(processedData, {
        value: {
          tickCount: 6,
          min: 0
        },
        chainRatio: {
          tickCount: 6,
          min: 0
        }
      })

      chart.axis('value', {
        position: 'left',
        label(text) {
          const cfg = {
            fontSize: 12,
            fill: '#999',
            fontFamily: 'Oswald, Oswald-Regular',
            fontWeight: 'normal',
            textAlign: 'right'
          }

          cfg.text = sepNumber(text)
          return cfg
        }
      })

      chart.axis('date', {
        tickLine: {
          lineWidth: 1,
          stroke: '#d9d9d9',
          length: 8
        },
        labelOffset: 12,
        label: {
          fontSize: 12,
          fill: '#999',
          fontFamily: 'Oswald, Oswald-Regular',
          fontWeight: 'normal',
          lineHeight: 12
        }
      })

      //if(this.isExistChainRatio) {
        //chart.axis('chainRatio', {
         // position: 'right',
         // labelOffset: 12,
          //label(text) {
         //   const cfg = {
         //     fontSize: 12,
         //     fill: '#999',
         //     fontFamily: 'Oswald, Oswald-Regular',
         //     fontWeight: 'normal'
       //     }

      //      cfg.text = text + '%'
      //      return cfg
     //     }
     //   })
   //   }

      // 如果是网格总收入指标
      if(this.data.findIndex(({ indexCode }) => indexCode === 'M10104100018') > -1) {
        chart.interval()
          .position('date*value')
          .size(12)
          .color('name', ['#2f9efe', '#2cd6a9', '#fbcc5b', '#ff723d'])
          .adjust('stack')
      }else {
        chart.interval()
          .position('date*value')
          .size(12)
          .color('name', ['#2f9efe', '#2cd6a9', '#fbcc5b', '#ff723d'])
      }

      // if(this.isExistChainRatio) {
        //chart.point()
          //.color('#8331ff')
          //.position('date*chainRatio')
          //.style({
            //stroke: '#fff',
            //lineWidth: 1
          //})

        //chart.line()
          //.color('#8331ff')
          //.position('date*chainRatio')
      //}

      chart
				.tooltip({
					triggerOn: ['touchstart'],
					showItemMarker: false,
					snap: true,
					showTooltipMarker: false,
					custom: true,
					tooltipMarkerStyle: {
						fill: '#fff',
						stroke: '#ff6600',
						lineWidth: 1
					},
					onShow: ev => {
            this.isToolipLocked = true
						const currentDatas = ev.items
						this.setTooltip(currentDatas)

            setTimeout(() => {
              this.isToolipLocked = false
            }, 300)
					},
					onHide: () => {
						this.isVisibleTooltip = false
						this.tooltipLeft = ''
						this.tooltipTop = ''
					}
				})

      chart.render()
      this.chart = chart
    },
    hideTooltip() {
      this.isVisibleTooltip = false
      this.currentDatas = []
    },
    formatChainRatio(val) {
      const [part1, part2] = String(val).split('.')

      if(!part2) {
        return part1 + '.00'
      }

      if(part2.length === 1) {
        return part1 + '.' + part2 + '0'
      }

      return val
    }
  }
}
</script>

<style lang="less" scoped>
.chart-wrapper-box {
  position: relative;
  width: 100%;
  height: 100%;

  .chart-box {
    width: 100% !important;
    height: 100% !important;
  }

  .y-unit-box {
    position: absolute;
    top: 0;
    font-size: 24 / 200rem;
    font-family: PingFang SC, PingFang SC-Regular;
    color: #999;

    &.unit1 {
      left: 0;
    }

    &.unit2 {
      right: 4px;
    }
  }

  .f2-tooltip-container {
    position: absolute;
    top: 35%;
    left: 50%;
    width: 60vw;
    padding: 20 / 200rem;
    transform: translate(-50%,-50%);
    background: rgba(0, 0, 0, 0.85);
    border-radius: 8 / 200rem;
    z-index: 2000;

    .date {
      margin: 0;
      padding-bottom: 10 / 200rem;
      font-size: 24 / 200rem;
      color: #fff;
      font-family: Oswald;
      font-weight: normal;
      border-bottom: 1px solid #444;
    }

    .summary-title-box {
      padding: 15 / 200rem 0;
      font-family: PingFang SC, PingFang SC-Regular;
      font-size: 24 / 200rem;
      color: #fff;
      border-bottom: 1px solid #444;

      .total {
        float: right;

        em {
          display: inline-block;
          margin-right: 7 / 200rem;
          font-family: Oswald, Oswald-Regular;
          font-size: 24 / 200rem;
          color: #fff;
          font-style: normal;
          line-height: 1;
          vertical-align: middle;
        }
      }
    }

    .income-detail-list-box {
      padding: 18 / 200rem 0;
    
      .income-detail-item-box {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12 / 200rem;

        &:last-child {
          margin-bottom: 0;
        }

        .left {
          font-size: 24 / 200rem;
          font-family: PingFang SC, PingFang SC-Regular;
          color: #fff;

          .circle {
            display: inline-block;
            width: 13 / 200rem;
            height: 13 / 200rem;
            margin-right: 16 / 200rem;
            margin-top: -3px;
            border-radius: 50%;
            vertical-align: middle;
          }
        }

        .right {
          margin-left: 16 / 200rem;
          font-size: 24 / 200rem;
          font-family: PingFang SC, PingFang SC-Regular;
          color: #fff;

          em {
            display: inline-block;
            margin-right: 8 / 200rem;
            font-family: Oswald, Oswald-Regular;
            font-size: 24 / 200rem;
            color: #fff;
            font-style: normal;
            line-height: 1;
            vertical-align: middle;
            text-align: left;
            word-break: break-all;
          }
        }
      }
    }

    .chain-ratio-box {
      padding-top: 12 / 200rem;
      font-size: 24 / 200rem;
      font-family: PingFang SC, PingFang SC-Regular;
      color: #fff;
      border-top: 1px solid #444;

      .circle {
        display: inline-block;
        width: 13 / 200rem;
        height: 13 / 200rem;
        margin-right: 16 / 200rem;
        margin-top: -3px;
        border-radius: 50%;
        vertical-align: middle;
      }
      
      .percentage {
        float: right;
        margin-top: 3px;
        font-family: Oswald, Oswald-Regular;
        font-size: 24 / 200rem;
        color: #fff;
        font-style: normal;
        line-height: 1;
        vertical-align: middle;

        .arrow {
          display: inline-block;
          margin-left: 6 / 200rem;

          &.up {
            transform: rotateZ(-90deg);
          }

          &.down {
            transform: rotateZ(90deg);
          }
        }
      }
    }
  }
}
</style>
