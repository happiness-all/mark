Vue的补充文档
1.@符号是webpack中配置的默认路由，这东西在vue标准模板里面的build/webpack.base.conf这个文件里面。一般是指src下的文件夹。
2. .editorconfig是vue中eslint的补充说明；
3. .env.development表示是在开发环境下才能生效 ，还有其他模式的见链接：https://cli.vuejs.org/zh/guide/mode-and-env.html；
4．vue.config中的文件是什么就是类似webpack.config.js文件，是配置端口，打包后文件路径，以及图片的配置等文件。他和vuecli 2.0版本中的config->index.js功能类似。
5.navigator.online是一个属性，返回浏览器的联网状态。主要用于查看你是否连接了互联网。在正常联网的情况下会返回true，没有联网即离线的状态下返回false。
6.怎么查看npm 全局安装 npm list 包名;
7.$nextTick的作用，延迟到下一次更新DOM之后执行回调，在修改数据之后立即使用这个方法，获得更新后的DOM实例。
 Mounted不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以使用vm.$nextTick替换掉mounted。
Vue中数据和DOM渲染是异步的，所有，DOM结构中随数据改变这样的操作都应该放进this.$nextTick()的回调函数中。
8.vue下的.env、.env.development和.env.production
项目根目录下创建.env、.env.development和.env.production三个文件，文件名的解释说明如下：
.env是无论开发环境还是生产环境都会加载的配置文件；
.env.development开发环境加载的配置文件；
.env.production生产环境加载的配置文件
他其实就是vue中的全局变量，需要注意的是，配置文件中的属性名必须以VUE_APP开头，
// .env
VUE_APP_QQQ = `QQ`
console.log(process.env.VUE_APP_QQQ)  // -> `QQ`
在vue启动的时候可能同时加载多个.env文件，如果有同名的现象，后面加载的会覆盖前面文件定义的变量，.env文件总是优先被加载。注意：不论定义的时候是什么类型的值，最后读取的时候都是字符串
Npm插件
qs插件就是将对象转化为可以在url地址上输入的，用&连接的字符串；
qs.parse() 字符串转对象；
qs.stingify()对象转字符串；
babel-polyfill是对深层es6转换为es5做铺垫。
8.git命令下来分支代码 git clone –b 分支名 地址
9.vue创建项目的命令实际上是根据vue-cli的等级看的。
10.vue的main.js中的定义的方法，比如字符串原型上的转义方法在vue新建的组件中使用的话，必须借助vue相关api,比如methods、mounted等；
11.window中的两个事件onunload，onbeforeunload都是在刷新或关闭时调用，可以在<script>脚本中通过 window.onunload来调用。区别在于onbeforeunload在onunload之前执行，它还可 以阻止onunload的执行。
onbeforeunload 是正要去服务器读 取新的页面时调用，此时还没开始读取；而onunload则已经从服务器上读到了需要加载的新的页面，在即将替换掉当前页面时调用。
12.  setRootFS() {
            // 屏幕自适应,自动根据屏幕宽高比选择根据宽度或者高度自适应,保持始终一屏显示,只用于使用rem单位
            const deviceWidth =
                document.documentElement.clientWidth ||
                window.innerWidth ||
                window.pageXOffset
            const deviceHeight =
                document.documentElement.clientHeight ||
                window.inneHeight ||
                window.pageYOffset

            let widthScale = deviceWidth / 1600
            let heightScale = deviceHeight / 900
            let scale = widthScale > heightScale ? heightScale : widthScale
            this.setRootPxUnit(scale)
            const fontSize = scale * 20
            document.documentElement.style.fontSize = fontSize + 'px'
        },
12．开启弹性盒子之后，内部的行内元素的宽度和高度设置有效。
13.扶额代理相关问题配置完代理后一定要重启项目,否则代理不生效
如果对axios进行了二次封装,请把axios的baseUrl的值改为空,否则就会在netWork中发现请求的地址会成为 …/api/dev…
