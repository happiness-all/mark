<template>
  <div>
    <HeaderComponent>
      <span slot="left" @click="onClickLeft()" class="left-slot"></span>
      <span slot="right" @click="onClickRight()" class="right-slot">确定</span>
    </HeaderComponent>
    <!-- <van-nav-bar
      class="cus-nav"
      title="选择经纬度"
      right-text="确定"
      left-arrow
      @click-left="onClickLeft"
      @click-right="onClickRight"
    ></van-nav-bar> -->
    <div class="B-map" ref="Bmap">
      <img :src="crtIcon" alt class="b-pos" ref="Bpos" />
      <img :src="locImg" alt class="loc-pos" ref="Bpos" @click="getLoc" />
      <div id="gridMap" class="grid-map"></div>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Prop, Vue, Emit } from "vue-property-decorator";
import { State, Mutation } from "vuex-class";
import { Toast } from "vant";
// import { getWanggeInfo } from '@/pages/form-h5/api/formApi'
import { checkProtocol, parseQueryString } from "./util";
import gcoord from "gcoord";
// import "@/pages/form-h5/views/common/lnglat/local.ts";
import HeaderComponent from "@/components/common/header-component.vue";
interface queryFormConfig {
  lat: number;
  lng: number;
}
declare const BMap: any;
@Component({
  components: {
    HeaderComponent
  }
})
export default class formGetLngLat extends Vue {
  private url: string = "";
  private map: any = "";
  // private activeImg: any = require("@/assets/map/addicon.png");
  private activeImg: any = require("@/assets/map/current_position_icon.svg");
  private locImg: any = require("@/assets/map/loc-people.png");

  private crtIcon: any = require("@/assets/map/current_position_icon.svg");

  private initFlag: Boolean = true;
  private queryForm: queryFormConfig = {
    lat: 0,
    lng: 0
  };

  private statictPst: queryFormConfig = {
    lat: 0,
    lng: 0
  };

  created() {
    // 设置初始值：/form/getLngLat?lat=22.96403&lng=113.8876
    //数据保存在 sessionStorage 字段为longitude：经度 latitude：纬度
    this.initFlag = true;
    this.$nextTick(() => {
      const obj = parseQueryString();
      this.$set(this.queryForm, "lat", obj.lat);
      this.$set(this.queryForm, "lng", obj.lng);

      // this.$set(this.statictPst, "lat", obj.lat);
      // this.$set(this.statictPst, "lng", obj.lng);

      obj.lat && sessionStorage.setItem("latitude", obj.lat);
      obj.lng && sessionStorage.setItem("longitude", obj.lng);

      this.loadscript();
      this.getLoc();
    });
  }
  get routeName(): string | undefined {
    return this.$route.name;
  }
  onClickLeft() {
    this.$router.go(-1);
  }
  onClickRight() {
    //数据保存在 sessionStorage 字段为longitude：经度 latitude：纬度
    // 且返回上级路由
    const zoom = this.map.getZoom();
    sessionStorage.setItem("corprate-zoom", zoom);
    this.getPex();
    // let formIndex: any = this.$route.query.formIndex;
    // let childFormIndex: any = this.$route.query.childFormIndex;
    // let formList: Array<any> = JSON.parse(
    //   JSON.stringify(this.formModule.formList)
    // );
    // let showType: any = this.$route.query.showType;
    // debugger
    window.$surveyEventBus.$emit("getLongitudeAndLatitude", {
      long: this.queryForm.lng.toFixed(6),
      lat: this.queryForm.lat.toFixed(6)
    });
    window.history.go(-1);
  }
  getStrLng() {
    return +(sessionStorage.getItem("longitude") || 0);
  }
  getStrLat() {
    return +(sessionStorage.getItem("latitude") || 0);
  }
  getBD(lng: number, lat: number) {
    var GCJ02: any = gcoord.transform(
      [lng, lat],
      gcoord.WGS84, // 经纬度坐标
      gcoord.BD09 // 当前坐标系
      // 目标坐标系
    );
    return GCJ02;
  }
  getWG(lng: number, lat: number) {
    var GCJ02: any = gcoord.transform(
      [lng, lat],
      gcoord.BD09, // 经纬度坐标
      gcoord.WGS84 // 当前坐标系
      // 目标坐标系
    );
    return GCJ02;
  }
  async getLoc() {
    // await this.getPosMethods();
    await this.getCurrentPst(true); //从当前用户位置拿经纬度
    let lng: number = this.getStrLng();
    let lat: number = this.getStrLat();
    var GCJ02: any = this.getBD(lng, lat);
    const point = new BMap.Point(GCJ02[0], GCJ02[1]);
    const zoom = this.map.getZoom();
    this.map.centerAndZoom(point, zoom);
  }
  getPex() {
    var pixel = this.map.pointToOverlayPixel(this.map.getCenter());
    var Point = this.map.overlayPixelToPoint({ x: pixel.x, y: pixel.y });
    var GCJ02: any = this.getWG(Point.lng, Point.lat);
    this.queryForm.lng = GCJ02[0];
    this.queryForm.lat = GCJ02[1];
  }
  async loadscript() {
    window.loadScript = function (url: string, callback: any) {
      let s: any = document.createElement("script");
      s.setAttribute("type", "text/javascript");
      s.onload = s.onreadystatechange = function () {
        if (this.readyState === "loaded" || this.readyState === "complete") {
          this.onload = this.onreadystatechange = null;
          this.parentNode.removeChild(this);
          if (callback) {
            callback();
          }
        } else {
          this.onload = this.onreadystatechange = null;
          this.parentNode.removeChild(this);
          if (callback) {
            callback();
          }
        }
      };
      s.setAttribute("src", url);
      document.body.appendChild(s);
    };

    if (typeof window.BMAP_API_VERSION !== "undefined") {
      if (!this.queryForm.lng || !this.queryForm.lat) {
        this.initFlag = false;
        await this.getPosMethods();
      }
      this.mapInit();
      return;
    }

    window.loadScript(`${checkProtocol()}://api.map.baidu.com/api?v=3.0&ak=LxlpDGuCkIBW2KPoKkd8PzRAb2tkdbhl&callback=mapInit`);
    window.mapInit = async () => {
      if (!this.queryForm.lng || !this.queryForm.lat) {
        this.initFlag = false;
        await this.getPosMethods();
      }
      this.mapInit();
    };
  }
  async getPosMethods() {
    try {
      await this.getCurrentPst();
      this.queryForm.lng = this.getStrLng();
      this.queryForm.lat = this.getStrLat();
      
    } catch (error) {
      console.log("获取用户经纬度失败，getPosMethods", error);
    }
  }
  getCurrentPst(getNew?: Boolean) {
    return new Promise((resolve: any, reject: any) => {
      let latitude: number = !getNew ? this.getStrLat() : 0;
      let longitude: number = !getNew ? this.getStrLng() : 0;
      console.log("缓存经纬度： " + latitude + "---" + longitude);
      if (latitude && longitude) {
        console.log("从缓存拿经纬度");
        resolve();
      } else {
        let isIOS = navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
        if(!isIOS) {
          var geolocation = new BMap.Geolocation();
          var gc = new BMap.Geocoder();//创建地理编码器
          // 开启SDK辅助定位
          geolocation.enableSDKLocation();
          geolocation.getCurrentPosition(data => {
            var GCJ02: any = gcoord.transform(
              [data.point.lng, data.point.lat],
              gcoord.BD09, // 经纬度坐标
              gcoord.WGS84 // 当前坐标系
              // 目标坐标系
            );
            sessionStorage.setItem("latitude", GCJ02[1]);
            sessionStorage.setItem("longitude", GCJ02[0]);
            resolve();
          })
        } else {
          let timers: any = null;
            let i = 1;
            timers = setInterval(fn, 0);
            function fn() {
              clearInterval(timers);
              timers = null;
              console.log("获取经纬度第" + i + "次");
              window.ado.getLatLng({ 'timeout': 3000, 'loop': false }).then((res: any) => {
                if (res.code === 9001) {
                  // 未开启权限
                  if (i % 10 === 0 || i === 1) {
                    console.log("未开启权限");
                    Toast({ message: "未开启权限", position: "bottom" });
                  }
                  i++;
                  timers = setInterval(fn, 3500);
                } else if (res.code === 9002) {
                  // 未开启定位
                  if (i % 10 === 0 || i === 1) {
                    console.log("未开启定位");
                    Toast({ message: "未开启定位", position: "bottom" });
                  }
                  i++;
                  timers = setInterval(fn, 3500);
                } else if (res.code === 9003) {
                  // 未取到定位数据
                  let latitude = sessionStorage.getItem("latitude");
                  let longitude = sessionStorage.getItem("longitude");
                  if (latitude && longitude) {
                    resolve();
                  } else {
                    i++;
                    timers = setInterval(fn, 3500);
                  }
                } else if (res.code === 1) {
                  // 获取定位成功
                  console.log("获取经纬度成功  " + i);
                  sessionStorage.setItem("latitude", res.data.cur.lat);
                  sessionStorage.setItem("longitude", res.data.cur.lng);
                  console.log("返回data", res.data, res.data.cur);
                  resolve();
                }
              });
            }
        }
      }
    });
  }
  mapInit() {
    this.map = new BMap.Map("gridMap");
    const that = this;
    var GCJ02: number[] = this.getBD(this.queryForm.lng, this.queryForm.lat);

    this.queryForm.lng = GCJ02[0];
    this.queryForm.lat = GCJ02[1];
    const point = new BMap.Point(this.queryForm.lng, this.queryForm.lat);
    if (this.initFlag) {
      let crtMaker: any = new BMap.Icon(this.activeImg, new BMap.Size(16, 26));
      let maker: any = new BMap.Marker(point, {
        icon: crtMaker
      });
      this.map.addOverlay(maker);
    }

    const zoom = sessionStorage.getItem("corprate-zoom") || 16;
    this.map.centerAndZoom(point, zoom);
    this.map.enableScrollWheelZoom(true);
  }
}
</script>
<style lang="less" scoped>
.loc-pos {
  position: fixed;
  bottom: 30px;
  left: 20px;
  z-index: 10;
  width: 50px;
  height: 50px;
  border-radius: 50px;
}
.b-pos {
  position: fixed;
  top: calc(50% + 35px);
  left: 50%;
  z-index: 10;
  width: 26px;
  height: 26px;
  transform: translateX(-50%) translateY(-100%);
}
.B-map {
  // position: fixed;
  // top: 0px;
  // left: 0;
  // right: 0;
  // bottom: 0;
  height: calc(~"100vh - 44px");
  width: 100%;
  .grid-map {
    width: 100%;
    height: 100%;
  }
}
</style>
<style>
.anchorBL {
  display: none;
}
</style>
