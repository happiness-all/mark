<template>
  <div class="face-cover-wrapper" @click="imgClick">
    <img :src="src" />
    <input
      ref="input"
      type="file"
      accept="image/*"
      @change="fileChange"
      name=""
      style="display: none"
    />
  </div>
</template>

<script>
import { getFileInfo, getFilesInfo, getImgInfo } from "@/lib/util";
import codeText from "@/lib/errorCode";

export default {
  props: {
    minWidth: {
      type: Number,
      default: 0,
    },
    minHeight: {
      type: Number,
      default: 0,
    },
    maxWidth: {
      type: Number,
      default: Infinity,
    },
    maxHeight: {
      type: Number,
      default: Infinity,
    },
    minSize: {
      type: Number,
      default: 0,
    },
    maxSize: {
      type: Number,
      default: Infinity,
    },
    format: {
      // 图片格式
      type: Array,
      default() {
        return ["png", "jpg"];
      },
    },
    imgSrc: {
      type: String,
      default: "",
    },
  },
  data() {
    return {
      src: "",
    };
  },
  watch: {
    imgSrc(newVal, oldVal) {
      this.src = newVal;
    },
  },
  created() {
    this.src = this.imgSrc;
  },
  /*computed: {
		srcChange: {
			get () {
				return this.imgSrc
			},
			set (val) {
				return 
			}
		}
	},*/
  methods: {
    imgClick() {
      this.$refs.input.click();
    },
    emitChange(a) {
      this.$emit("onChange", { ...a, files: this.$refs.input.files });
    },
    trans() {
      this.$refs.input.type = "text";
      this.$refs.input.type = "file";
    },

    fileChange(e) {
      const _this = this;
      const imgBaseInfo = getFilesInfo(e.target.files)[0];
      const { type, mb } = imgBaseInfo;

      // debugger
      if (this.format.indexOf(type) == -1) {
        this.emitChange({
          info: "请选择png,jpg图片格式",
          status: false,
        });
        this.trans();
        return;
      }
      if (mb > 4) {
        this.emitChange({
          info: "请选择图片大小为4M以内",
          status: false,
        });
        this.trans();
        return;
      }
      getImgInfo(e.target.files[0]).then(({ width, height, result }) => {
        // if (mb < this.minSize || mb > this.maxSize) {	// 失败
        // 	this.emitChange({
        // 		info: codeText.s002,
        // 		status: false
        // 	})
        // } else if (
        // 	width < this.minWidth || width > this.maxWidth ||
        // 	height < this.minHeight || height > this.maxHeight
        // ) {
        // 	this.emitChange({
        // 		info: codeText.s003,
        // 		status: false
        // 	})
        // }
        // else {
        this.emitChange({
          status: true,
          next(cb) {
            _this.src = result;
            cb && cb(result);
          },
        });
        // }
        this.trans();
      });
    },
  },
};
</script>

<style lang="less" rel="stylesheet/less">
@import "../../assets/const.less";
.face-cover-wrapper {
  width: 100%;
  height: 100%;
}
</style>
